var WPFormBuilder=function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=758)}({0:function(t,e){t.exports=React},10:function(t,e){t.exports=InternalShared("InternalShared/PageBuilder/Controls/Properties/styles/GroupProperties")},106:function(t,e,n){"use strict";function r(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function o(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}n.d(e,"a",(function(){return i}));var i=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";r(this,t),this.Table=void 0,this.tHead=void 0,this.tBody=void 0,this.tFoot=void 0,this.lastSectionCreated=void 0,this.lastRow=void 0,this.Table=document.createElement("table"),this.Table.className=e}var e,n,i;return e=t,(n=[{key:"CreateTHead",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";null==this.tHead&&(this.tHead=document.createElement("thead"),this.tHead.className=t,this.Table.appendChild(this.tHead),this.lastSectionCreated=this.tHead)}},{key:"CreateTBody",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";null==this.tBody&&(this.tBody=document.createElement("tbody"),this.tBody.className=t,this.Table.appendChild(this.tBody),this.lastSectionCreated=this.tBody)}},{key:"CreateTFoot",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";null==this.tFoot&&(this.tFoot=document.createElement("tfoot"),this.tFoot.className=t,this.Table.appendChild(this.tFoot),this.lastSectionCreated=this.tFoot)}},{key:"CreateRow",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";if(null==this.lastSectionCreated)throw new Error("No tbody or thead was created yet");this.lastRow=document.createElement("tr"),this.lastRow.className=t,this.lastSectionCreated.appendChild(this.lastRow)}},{key:"CreateTextColumn",value:function(t){var e,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"td",o=arguments.length>3&&void 0!==arguments[3]&&arguments[3],i=document.createElement(r);i.className=n,this.lastRow.appendChild(i),o?e=i:(e=document.createElement("p"),i.appendChild(e)),e.innerText=t}},{key:"CreateRawColumn",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"td",r=document.createElement(n);return r.className=e,this.lastRow.appendChild(r),r.appendChild(t),r}}])&&o(e.prototype,n),i&&o(e,i),t}()},11:function(t,e,n){"use strict";n.d(e,"b",(function(){return f})),n.d(e,"c",(function(){return h})),n.d(e,"a",(function(){return p}));var r=n(4),o=(n(296),n(32));function i(t){return(i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function a(t,e){var n;if("undefined"==typeof Symbol||null==t[Symbol.iterator]){if(Array.isArray(t)||(n=function(t,e){if(!t)return;if("string"==typeof t)return u(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);"Object"===n&&t.constructor&&(n=t.constructor.name);if("Map"===n||"Set"===n)return Array.from(t);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return u(t,e)}(t))||e&&t&&"number"==typeof t.length){n&&(t=n);var r=0,o=function(){};return{s:o,n:function(){return r>=t.length?{done:!0}:{done:!1,value:t[r++]}},e:function(t){throw t},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,a=!0,l=!1;return{s:function(){n=t[Symbol.iterator]()},n:function(){var t=n.next();return a=t.done,t},e:function(t){l=!0,i=t},f:function(){try{a||null==n.return||n.return()}finally{if(l)throw i}}}}function u(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function l(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function s(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function c(t,e,n){return e&&s(t.prototype,e),n&&s(t,n),t}var f=function(){function t(){l(this,t),this.IsDirty=!1,this._fields=[],this._defaultValuesLoaded=void 0,this._defaultValuesLoaded=!1}return c(t,[{key:"AddField",value:function(t){null!=this._fields&&this._fields.push(t)}},{key:"RemoveField",value:function(t){if(null!=this._fields){var e=this._fields.indexOf(t);e>=0&&this._fields.splice(e,1)}}},{key:"Observe",value:function(t,e){var n=this,o=function(){e(n[t])},i=new y;return i.mainSubscription=Object(r.observe)(this,t,(function(t){o(),n.ObserveSubProperties(t.newValue,o,i)})),this.ObserveSubProperties(this[t],o,i),i.Unsubscribe.bind(i)}},{key:"ObserveSubProperties",value:function(t,e,n){if(n.SubElementsUnsubscribe(),null!=t&&void 0!==t.$mobx)for(var o in t.$mobx.values)n.subElements.push(Object(r.observe)(t,o,(function(t){e()})))}},{key:"GetValue",value:function(t){return this[t]}},{key:"SetValue",value:function(t,e){return this.ParseAndSetValue(t,e)}},{key:"Merge",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;if(this._defaultValuesLoaded||(this.LoadDefaultValues(),this._defaultValuesLoaded=!0),null==t)return this.SetAutoIncrementIds(),this;for(var e in t)if(this.hasOwnProperty(e)){var n=t[e];this.ParseAndSetValue(e,n)}return this.SetAutoIncrementIds(),this}},{key:"SetAutoIncrementIds",value:function(){if(null!=this.StoreAutoIncrementDictionary){var t=this.StoreAutoIncrementDictionary;for(var e in this)if(this.hasOwnProperty(e)){if(null!=t[e]){var n=o.a.SanitizeNumber(this[e]);if(0==n||null==n){var r=t[e];++r,this[e]=r}t[e]=Math.max(this[e],t[e])}}}}},{key:"ParseAndSetValue",value:function(t,e){var n=this[t],o=this.GetValueFromLoader(t,e);if(null==o)if(null==n||null==n.LoadDefaultValues){if("number"==typeof n){var u=parseFloat(e.toString());return isNaN(u)&&(u=0),void(this[t]=u)}if("boolean"!=typeof n)if("string"!=typeof n)if(null!=n&&n.constructor==Array||Object(r.isObservableArray)(n)){var l=Reflect.getMetadata(d,this,t);if(null==l)throw"Property "+t+" of class "+this.constructor.name+" is an array but does not have the OptionType decorator implemented";if(this[t]=[],l==String)return void(this[t]=e);if(l==Number)return void(this[t]=e);var s,c=a(e);try{for(c.s();!(s=c.n()).done;){var f=s.value;null!=f&&f.hasOwnProperty("_fields")&&f.hasOwnProperty("_defaultValuesLoaded")?this[t].push(f):this[t].push((new l).Merge(f))}}catch(t){c.e(t)}finally{c.f()}}else{if(Reflect.getMetadata(d,this,t)!=Object)throw"Could not process type "+i(n)+" of "+t;this[t]=e}else this[t]=e;else isNaN(e)?this[t]="true"==e:this[t]=!0===e||1==parseFloat(e)}else null!=e&&e.hasOwnProperty("_fields")&&e.hasOwnProperty("_defaultValuesLoaded")?this[t]=e:this[t].Merge(e);else this[t]=o}},{key:"GetValueFromLoader",value:function(t,e){return null}},{key:"Validate",value:function(){var t=!0;if(null==this._fields)return t;var e,n=a(this._fields);try{for(n.s();!(e=n.n()).done;){e.value.Validate()||(t=!1)}}catch(t){n.e(t)}finally{n.f()}return t}},{key:"ToObject",value:function(){var t=Object(r.toJS)(this);return this.SerializeObject(t)}},{key:"Subscribe",value:function(t,e){return Object(r.intercept)(this,t,e)}},{key:"SerializeObject",value:function(t){var e=["_fields","_defaultValuesLoaded","IsDirty"];for(var n in t){var r=t[n];e.indexOf(n)>=0||"function"==typeof r?delete t[n]:(Array.isArray(r)&&this.SerializeArray(r),"object"==i(r)&&(r=this.SerializeObject(r)))}return t}},{key:"SerializeArray",value:function(t){for(var e=0;e<t.length;e++){var n=t[e];Array.isArray(n)&&this.SerializeArray(n),"object"==i(n)&&(t[e]=this.SerializeObject(n))}}}]),t}(),d="StoreType";function h(t){return Reflect.metadata(d,t)}var y=function(){function t(){l(this,t),this.mainSubscription=void 0,this.subElements=[]}return c(t,[{key:"Unsubscribe",value:function(){this.mainSubscription(),this.SubElementsUnsubscribe()}},{key:"SubElementsUnsubscribe",value:function(){if(null!=this.subElements){var t,e=a(this.subElements);try{for(e.s();!(t=e.n()).done;){(0,t.value)()}}catch(t){e.e(t)}finally{e.f()}this.subElements=[]}}}]),t}();function p(t){return function(t,e,n){null==t.StoreAutoIncrementDictionary&&(t.StoreAutoIncrementDictionary=[]),t.StoreAutoIncrementDictionary[e]=0}}},13:function(t,e){t.exports=InternalShared("InternalShared/PageBuilder/Controls/Core/PDFControlBase")},20:function(t,e){t.exports=InternalShared("InternalShared/PageBuilder/Controls/Core/PDFControlBase.Options")},21:function(t,e){t.exports=InternalShared("InternalShared/PageBuilder/Controls/Properties/ColorProperty")},23:function(t,e){t.exports=InternalShared("InternalShared/PageBuilder/Controls/Properties/StyleSets/DimensionStyleSet")},25:function(t,e){t.exports=InternalShared("InternalShared/PageBuilder/Controls/Properties/DropDownProperty")},281:function(t,e){t.exports=InternalShared("InternalShared/PageBuilder/Controls/Properties/ImageProperty")},296:function(t,e,n){(function(t,e){
/*! *****************************************************************************
Copyright (C) Microsoft. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
var n;!function(n){!function(r){var o="object"==typeof e?e:"object"==typeof self?self:"object"==typeof this?this:Function("return this;")(),i=a(n);function a(t,e){return function(n,r){"function"!=typeof t[n]&&Object.defineProperty(t,n,{configurable:!0,writable:!0,value:r}),e&&e(n,r)}}void 0===o.Reflect?o.Reflect=n:i=a(o.Reflect,i),function(e){var n=Object.prototype.hasOwnProperty,r="function"==typeof Symbol,o=r&&void 0!==Symbol.toPrimitive?Symbol.toPrimitive:"@@toPrimitive",i=r&&void 0!==Symbol.iterator?Symbol.iterator:"@@iterator",a="function"==typeof Object.create,u={__proto__:[]}instanceof Array,l=!a&&!u,s={create:a?function(){return L(Object.create(null))}:u?function(){return L({__proto__:null})}:function(){return L({})},has:l?function(t,e){return n.call(t,e)}:function(t,e){return e in t},get:l?function(t,e){return n.call(t,e)?t[e]:void 0}:function(t,e){return t[e]}},c=Object.getPrototypeOf(Function),f="object"==typeof t&&t.env&&"true"===t.env.REFLECT_METADATA_USE_MAP_POLYFILL,d=f||"function"!=typeof Map||"function"!=typeof Map.prototype.entries?function(){var t={},e=[],n=function(){function t(t,e,n){this._index=0,this._keys=t,this._values=e,this._selector=n}return t.prototype["@@iterator"]=function(){return this},t.prototype[i]=function(){return this},t.prototype.next=function(){var t=this._index;if(t>=0&&t<this._keys.length){var n=this._selector(this._keys[t],this._values[t]);return t+1>=this._keys.length?(this._index=-1,this._keys=e,this._values=e):this._index++,{value:n,done:!1}}return{value:void 0,done:!0}},t.prototype.throw=function(t){throw this._index>=0&&(this._index=-1,this._keys=e,this._values=e),t},t.prototype.return=function(t){return this._index>=0&&(this._index=-1,this._keys=e,this._values=e),{value:t,done:!0}},t}();return function(){function e(){this._keys=[],this._values=[],this._cacheKey=t,this._cacheIndex=-2}return Object.defineProperty(e.prototype,"size",{get:function(){return this._keys.length},enumerable:!0,configurable:!0}),e.prototype.has=function(t){return this._find(t,!1)>=0},e.prototype.get=function(t){var e=this._find(t,!1);return e>=0?this._values[e]:void 0},e.prototype.set=function(t,e){var n=this._find(t,!0);return this._values[n]=e,this},e.prototype.delete=function(e){var n=this._find(e,!1);if(n>=0){for(var r=this._keys.length,o=n+1;o<r;o++)this._keys[o-1]=this._keys[o],this._values[o-1]=this._values[o];return this._keys.length--,this._values.length--,e===this._cacheKey&&(this._cacheKey=t,this._cacheIndex=-2),!0}return!1},e.prototype.clear=function(){this._keys.length=0,this._values.length=0,this._cacheKey=t,this._cacheIndex=-2},e.prototype.keys=function(){return new n(this._keys,this._values,r)},e.prototype.values=function(){return new n(this._keys,this._values,o)},e.prototype.entries=function(){return new n(this._keys,this._values,a)},e.prototype["@@iterator"]=function(){return this.entries()},e.prototype[i]=function(){return this.entries()},e.prototype._find=function(t,e){return this._cacheKey!==t&&(this._cacheIndex=this._keys.indexOf(this._cacheKey=t)),this._cacheIndex<0&&e&&(this._cacheIndex=this._keys.length,this._keys.push(t),this._values.push(void 0)),this._cacheIndex},e}();function r(t,e){return t}function o(t,e){return e}function a(t,e){return[t,e]}}():Map,h=f||"function"!=typeof Set||"function"!=typeof Set.prototype.entries?function(){function t(){this._map=new d}return Object.defineProperty(t.prototype,"size",{get:function(){return this._map.size},enumerable:!0,configurable:!0}),t.prototype.has=function(t){return this._map.has(t)},t.prototype.add=function(t){return this._map.set(t,t),this},t.prototype.delete=function(t){return this._map.delete(t)},t.prototype.clear=function(){this._map.clear()},t.prototype.keys=function(){return this._map.keys()},t.prototype.values=function(){return this._map.values()},t.prototype.entries=function(){return this._map.entries()},t.prototype["@@iterator"]=function(){return this.keys()},t.prototype[i]=function(){return this.keys()},t}():Set,y=new(f||"function"!=typeof WeakMap?function(){var t=s.create(),e=r();return function(){function t(){this._key=r()}return t.prototype.has=function(t){var e=o(t,!1);return void 0!==e&&s.has(e,this._key)},t.prototype.get=function(t){var e=o(t,!1);return void 0!==e?s.get(e,this._key):void 0},t.prototype.set=function(t,e){return o(t,!0)[this._key]=e,this},t.prototype.delete=function(t){var e=o(t,!1);return void 0!==e&&delete e[this._key]},t.prototype.clear=function(){this._key=r()},t}();function r(){var e;do{e="@@WeakMap@@"+a()}while(s.has(t,e));return t[e]=!0,e}function o(t,r){if(!n.call(t,e)){if(!r)return;Object.defineProperty(t,e,{value:s.create()})}return t[e]}function i(t,e){for(var n=0;n<e;++n)t[n]=255*Math.random()|0;return t}function a(){var t,e=(t=16,"function"==typeof Uint8Array?"undefined"!=typeof crypto?crypto.getRandomValues(new Uint8Array(t)):"undefined"!=typeof msCrypto?msCrypto.getRandomValues(new Uint8Array(t)):i(new Uint8Array(t),t):i(new Array(t),t));e[6]=79&e[6]|64,e[8]=191&e[8]|128;for(var n="",r=0;r<16;++r){var o=e[r];4!==r&&6!==r&&8!==r||(n+="-"),o<16&&(n+="0"),n+=o.toString(16).toLowerCase()}return n}}():WeakMap);function p(t,e,n){var r=y.get(t);if(w(r)){if(!n)return;r=new d,y.set(t,r)}var o=r.get(e);if(w(o)){if(!n)return;o=new d,r.set(e,o)}return o}function v(t,e,n){var r=p(e,n,!1);return!w(r)&&!!r.has(t)}function b(t,e,n){var r=p(e,n,!1);if(!w(r))return r.get(t)}function S(t,e,n,r){p(n,r,!0).set(t,e)}function m(t,e){var n=[],r=p(t,e,!1);if(w(r))return n;for(var o=function(t){var e=E(t,i);if(!T(e))throw new TypeError;var n=e.call(t);if(!O(n))throw new TypeError;return n}(r.keys()),a=0;;){var u=I(o);if(!u)return n.length=a,n;var l=u.value;try{n[a]=l}catch(t){try{j(o)}finally{throw t}}a++}}function g(t){if(null===t)return 1;switch(typeof t){case"undefined":return 0;case"boolean":return 2;case"string":return 3;case"symbol":return 4;case"number":return 5;case"object":return null===t?1:6;default:return 6}}function w(t){return void 0===t}function C(t){return null===t}function O(t){return"object"==typeof t?null!==t:"function"==typeof t}function P(t,e){switch(g(t)){case 0:case 1:case 2:case 3:case 4:case 5:return t}var n=3===e?"string":5===e?"number":"default",r=E(t,o);if(void 0!==r){var i=r.call(t,n);if(O(i))throw new TypeError;return i}return function(t,e){if("string"===e){var n=t.toString;if(T(n))if(!O(o=n.call(t)))return o;if(T(r=t.valueOf))if(!O(o=r.call(t)))return o}else{var r;if(T(r=t.valueOf))if(!O(o=r.call(t)))return o;var o,i=t.toString;if(T(i))if(!O(o=i.call(t)))return o}throw new TypeError}(t,"default"===n?"number":n)}function k(t){var e=P(t,3);return"symbol"==typeof e?e:function(t){return""+t}(e)}function _(t){return Array.isArray?Array.isArray(t):t instanceof Object?t instanceof Array:"[object Array]"===Object.prototype.toString.call(t)}function T(t){return"function"==typeof t}function A(t){return"function"==typeof t}function E(t,e){var n=t[e];if(null!=n){if(!T(n))throw new TypeError;return n}}function I(t){var e=t.next();return!e.done&&e}function j(t){var e=t.return;e&&e.call(t)}function x(t){var e=Object.getPrototypeOf(t);if("function"!=typeof t||t===c)return e;if(e!==c)return e;var n=t.prototype,r=n&&Object.getPrototypeOf(n);if(null==r||r===Object.prototype)return e;var o=r.constructor;return"function"!=typeof o||o===t?e:o}function L(t){return t.__=void 0,delete t.__,t}e("decorate",(function(t,e,n,r){if(w(n)){if(!_(t))throw new TypeError;if(!A(e))throw new TypeError;return function(t,e){for(var n=t.length-1;n>=0;--n){var r=(0,t[n])(e);if(!w(r)&&!C(r)){if(!A(r))throw new TypeError;e=r}}return e}(t,e)}if(!_(t))throw new TypeError;if(!O(e))throw new TypeError;if(!O(r)&&!w(r)&&!C(r))throw new TypeError;return C(r)&&(r=void 0),function(t,e,n,r){for(var o=t.length-1;o>=0;--o){var i=(0,t[o])(e,n,r);if(!w(i)&&!C(i)){if(!O(i))throw new TypeError;r=i}}return r}(t,e,n=k(n),r)})),e("metadata",(function(t,e){return function(n,r){if(!O(n))throw new TypeError;if(!w(r)&&!function(t){switch(g(t)){case 3:case 4:return!0;default:return!1}}(r))throw new TypeError;S(t,e,n,r)}})),e("defineMetadata",(function(t,e,n,r){if(!O(n))throw new TypeError;return w(r)||(r=k(r)),S(t,e,n,r)})),e("hasMetadata",(function(t,e,n){if(!O(e))throw new TypeError;return w(n)||(n=k(n)),function t(e,n,r){if(v(e,n,r))return!0;var o=x(n);return!C(o)&&t(e,o,r)}(t,e,n)})),e("hasOwnMetadata",(function(t,e,n){if(!O(e))throw new TypeError;return w(n)||(n=k(n)),v(t,e,n)})),e("getMetadata",(function(t,e,n){if(!O(e))throw new TypeError;return w(n)||(n=k(n)),function t(e,n,r){if(v(e,n,r))return b(e,n,r);var o=x(n);return C(o)?void 0:t(e,o,r)}(t,e,n)})),e("getOwnMetadata",(function(t,e,n){if(!O(e))throw new TypeError;return w(n)||(n=k(n)),b(t,e,n)})),e("getMetadataKeys",(function(t,e){if(!O(t))throw new TypeError;return w(e)||(e=k(e)),function t(e,n){var r=m(e,n),o=x(e);if(null===o)return r;var i=t(o,n);if(i.length<=0)return r;if(r.length<=0)return i;for(var a=new h,u=[],l=0,s=r;l<s.length;l++){var c=s[l];a.has(c)||(a.add(c),u.push(c))}for(var f=0,d=i;f<d.length;f++){c=d[f];a.has(c)||(a.add(c),u.push(c))}return u}(t,e)})),e("getOwnMetadataKeys",(function(t,e){if(!O(t))throw new TypeError;return w(e)||(e=k(e)),m(t,e)})),e("deleteMetadata",(function(t,e,n){if(!O(e))throw new TypeError;w(n)||(n=k(n));var r=p(e,n,!1);if(w(r))return!1;if(!r.delete(t))return!1;if(r.size>0)return!0;var o=y.get(e);return o.delete(n),o.size>0||y.delete(e),!0}))}(i)}()}(n||(n={}))}).call(this,n(62),n(47))},300:function(t,e){t.exports=InternalShared("InternalShared/Events/GetControl")},301:function(t,e){t.exports=InternalShared("InternalShared/Events/GetControlOptions")},31:function(t,e){t.exports=InternalShared("InternalShared/PageBuilder/Controls/Properties/SimpleTextProperty")},32:function(t,e,n){"use strict";function r(t){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function o(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}n.d(e,"a",(function(){return i}));var i=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t)}var e,n,i;return e=t,i=[{key:"SanitizeStringArray",value:function(e){var n=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];return null==e?[]:Array.isArray(e)?e:n?[]:[t.SanitizeString(e)]}},{key:"SanitizeString",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"";return null==t||Array.isArray(t)||null==t.toString||"object"==r(t)?e:t.toString()}},{key:"GetValueFromPath",value:function(t,e){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"";if(null==t)return n;for(var r="";null!=(r=e.shift());){if(null==t[r])return n;t=t[r]}return t}},{key:"GetStringValueFromPath",value:function(e,n){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"",o=t.GetValueFromPath(e,n,null);return null==o?r:t.SanitizeString(o)}},{key:"SanitizeNumber",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;return null==t||Array.isArray(t)?e:(t=Number(t),isNaN(t)?e:t)}},{key:"SanitizeBoolean",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1];return null===t?e:"boolean"==typeof t?t:isNaN(Number(t))?e:0!=t}}],(n=null)&&o(e.prototype,n),i&&o(e,i),t}()},336:function(t,e,n){"use strict";function r(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}n.d(e,"a",(function(){return o}));var o=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.Config=void 0}var e,n,o;return e=t,o=[{key:"GetInstance",value:function(){return null==window.RNCurrencyUtils&&(window.RNCurrencyUtils=new t),window.RNCurrencyUtils}}],(n=[{key:"FormatValue",value:function(t){isNaN(t)&&(t=0);var e=t.toFixed(this.Config.NumberOfDecimals),n=e.split("."),r=n[0],o=n.length>1?"."+n[1]:"",i=/(\d+)(\d{3})/;if(""!=this.Config.ThousandSeparator)for(;i.test(r);)r=r.replace(i,"$1"+this.Config.ThousandSeparator+"$2");return o.length>0&&(o=o.slice(1),o=this.Config.DecimalSeparator+o),e=r+o,"left"==this.Config.Position?this.Config.Symbol+e:"left_space"==this.Config.Position?this.Config.Symbol+" "+e:"right"==this.Config.Position?e+this.Config.Symbol:"right_space"==this.Config.Position?e+" "+this.Config.Symbol:void 0}}])&&r(e.prototype,n),o&&r(e,o),t}()},4:function(t,e){t.exports=mobx},447:function(t,e){t.exports=InternalShared("InternalShared/Events/GetAdvancedField")},47:function(t,e){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(t){"object"==typeof window&&(n=window)}t.exports=n},51:function(t,e){t.exports=InternalShared("InternalShared/PageBuilder/Controls/Properties/CheckBoxProperty")},56:function(t,e){t.exports=InternalShared("InternalShared/PageBuilder/Fields/FieldItemBase")},61:function(t,e){t.exports=InternalShared("InternalShared/Events/UpdateStyleSettingsPanel")},62:function(t,e){var n,r,o=t.exports={};function i(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function u(t){if(n===setTimeout)return setTimeout(t,0);if((n===i||!n)&&setTimeout)return n=setTimeout,setTimeout(t,0);try{return n(t,0)}catch(e){try{return n.call(null,t,0)}catch(e){return n.call(this,t,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:i}catch(t){n=i}try{r="function"==typeof clearTimeout?clearTimeout:a}catch(t){r=a}}();var l,s=[],c=!1,f=-1;function d(){c&&l&&(c=!1,l.length?s=l.concat(s):f=-1,s.length&&h())}function h(){if(!c){var t=u(d);c=!0;for(var e=s.length;e;){for(l=s,s=[];++f<e;)l&&l[f].run();f=-1,e=s.length}l=null,c=!1,function(t){if(r===clearTimeout)return clearTimeout(t);if((r===a||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(t);try{r(t)}catch(e){try{return r.call(null,t)}catch(e){return r.call(this,t)}}}(t)}}function y(t,e){this.fun=t,this.array=e}function p(){}o.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)e[n-1]=arguments[n];s.push(new y(t,e)),1!==s.length||c||u(h)},y.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=p,o.addListener=p,o.once=p,o.off=p,o.removeListener=p,o.removeAllListeners=p,o.emit=p,o.prependListener=p,o.prependOnceListener=p,o.listeners=function(t){return[]},o.binding=function(t){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(t){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},758:function(t,e,n){"use strict";n.r(e);var r,o,i,a,u,l=n(9),s=n(447),c=n(56),f=n(10),d=n(13),h=n(23),y=n(281),p=n(31),v=n(51),b=n(4),S=n(11),m=n(20);function g(t){return(g="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function w(t,e,n,r){n&&Object.defineProperty(t,e,{enumerable:n.enumerable,configurable:n.configurable,writable:n.writable,value:n.initializer?n.initializer.call(r):void 0})}function C(t,e,n){return(C="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(t,e,n){var r=function(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=x(t)););return t}(t,e);if(r){var o=Object.getOwnPropertyDescriptor(r,e);return o.get?o.get.call(n):o.value}})(t,e,n||t)}function O(t,e,n,r,o){var i={};return Object.keys(r).forEach((function(t){i[t]=r[t]})),i.enumerable=!!i.enumerable,i.configurable=!!i.configurable,("value"in i||i.initializer)&&(i.writable=!0),i=n.slice().reverse().reduce((function(n,r){return r(t,e,n)||n}),i),o&&void 0!==i.initializer&&(i.value=i.initializer?i.initializer.call(o):void 0,i.initializer=void 0),void 0===i.initializer&&(Object.defineProperty(t,e,i),i=null),i}function P(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function k(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function _(t,e,n){return e&&k(t.prototype,e),n&&k(t,n),t}function T(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&A(t,e)}function A(t,e){return(A=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function E(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,r=x(t);if(e){var o=x(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return I(this,n)}}function I(t,e){return!e||"object"!==g(e)&&"function"!=typeof e?j(t):e}function j(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function x(t){return(x=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var L,D,M,R=function(t){T(n,t);var e=E(n);function n(){var t;P(this,n);for(var r=arguments.length,o=new Array(r),i=0;i<r;i++)o[i]=arguments[i];return(t=e.call.apply(e,[this].concat(o))).Type=void 0,t.Label=void 0,t.Format=void 0,t}return _(n,[{key:"LoadDefaultValues",value:function(){this.Type="",this.Label="",this.Format=D.string}}]),n}(S.b),G=(r=Object(S.c)(R),u=function(t){T(n,t);var e=E(n);function n(){var t;P(this,n);for(var r=arguments.length,o=new Array(r),u=0;u<r;u++)o[u]=arguments[u];return w(t=e.call.apply(e,[this].concat(o)),"Type",i,j(t)),w(t,"Columns",a,j(t)),t.ShowGrandTotal=void 0,t.ProductLabel=void 0,t.PriceLabel=void 0,t.GrandTotalLabel=void 0,t.RowSeparator=void 0,t.EvenColor=void 0,t.EvenBackground=void 0,t.OddColor=void 0,t.OddBackground=void 0,t.BorderColor=void 0,t}return _(n,[{key:"LoadDefaultValues",value:function(){C(x(n.prototype),"LoadDefaultValues",this).call(this),this.Type=ot.InvoiceDetail.toString(),this.Columns=[],this.ShowGrandTotal=!0,this.GrandTotalLabel="Total",this.RowSeparator=M.Stripped.toString(),this.ProductLabel="Product",this.PriceLabel="Price",this.OddColor="#000000",this.OddBackground="#FFFFFF",this.EvenBackground="#f9f9f9",this.EvenColor="#000000",this.BorderColor="#dfdfdf"}}]),n}(m.PDFControlBaseOptions),i=O((o=u).prototype,"Type",[b.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:null}),a=O(o.prototype,"Columns",[r],{configurable:!0,enumerable:!0,writable:!0,initializer:null}),o);!function(t){t.ProductName="name",t.Price="price"}(L||(L={})),function(t){t.string="string",t.number="number"}(D||(D={})),function(t){t.None="none",t.Line="line",t.Stripped="stripped",t.LastRow="last"}(M||(M={}));var F=n(106),B=n(336),N=n(77),z=n(25),V=n(21),U=n(61);function H(t){return(H="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function K(t,e){var n;if("undefined"==typeof Symbol||null==t[Symbol.iterator]){if(Array.isArray(t)||(n=function(t,e){if(!t)return;if("string"==typeof t)return W(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);"Object"===n&&t.constructor&&(n=t.constructor.name);if("Map"===n||"Set"===n)return Array.from(t);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return W(t,e)}(t))||e&&t&&"number"==typeof t.length){n&&(t=n);var r=0,o=function(){};return{s:o,n:function(){return r>=t.length?{done:!0}:{done:!1,value:t[r++]}},e:function(t){throw t},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,a=!0,u=!1;return{s:function(){n=t[Symbol.iterator]()},n:function(){var t=n.next();return a=t.done,t},e:function(t){u=!0,i=t},f:function(){try{a||null==n.return||n.return()}finally{if(u)throw i}}}}function W(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function $(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function J(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function Y(t,e,n){return(Y="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(t,e,n){var r=function(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=Z(t)););return t}(t,e);if(r){var o=Object.getOwnPropertyDescriptor(r,e);return o.get?o.get.call(n):o.value}})(t,e,n||t)}function q(t,e){return(q=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function Q(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,r=Z(t);if(e){var o=Z(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return X(this,n)}}function X(t,e){return!e||"object"!==H(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function Z(t){return(Z=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var tt=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&q(t,e)}(i,t);var e,n,r,o=Q(i);function i(){var t;$(this,i);for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];return(t=o.call.apply(o,[this].concat(n))).AllowedResizeDirection="horizontal",t.Options=void 0,t.properties=void 0,t}return e=i,(n=[{key:"GetStyles",value:function(){var t=this,e=[];switch(e.push(h.DimensionStyleSet.GetStyles(this)),e.push(new f.GroupProperties("Header Styles").AddProperties([new V.ColorProperty(this,"background-color",this.StyleManager.CreateStyleClassManager(".productDetail th")).SetLabel("Background Color").AddStyles({width:"50%",display:"inline-block"}),new V.ColorProperty(this,"color",this.StyleManager.CreateStyleClassManager(".productDetail th")).SetLabel("Color").AddStyles({width:"50%",display:"inline-block"})])),this.Options.RowSeparator){case M.Stripped:e.push(new f.GroupProperties("Separator Styles").AddProperties([new V.ColorProperty(this,"OddBackground").SetLabel("Odd Background").AddStyles({width:"50%",display:"inline-block"}).OnChange((function(e){return t.SetInitialStyles()})),new V.ColorProperty(this,"OddColor",this.Options).SetLabel("Odd Color").AddStyles({width:"50%",display:"inline-block"}).OnChange((function(e){return t.SetInitialStyles()})),new V.ColorProperty(this,"EvenBackground").SetLabel("Even Background").AddStyles({width:"50%",display:"inline-block"}).OnChange((function(e){return t.SetInitialStyles()})),new V.ColorProperty(this,"EvenColor",this.Options).SetLabel("Even Color").AddStyles({width:"50%",display:"inline-block"}).OnChange((function(e){return t.SetInitialStyles()}))]));break;case M.Line:case M.LastRow:e.push(new f.GroupProperties("Separator Styles").AddProperties([new V.ColorProperty(this,"BorderColor").SetLabel("Border Color").OnChange((function(e){return t.SetInitialStyles()})),new V.ColorProperty(this,"background-color",this.StyleManager.CreateStyleClassManager(".productDetail tbody")).SetLabel("Background Color").AddStyles({width:"50%",display:"inline-block"}),new V.ColorProperty(this,"color",this.StyleManager.CreateStyleClassManager(".productDetail tbody")).SetLabel("Color").AddStyles({width:"50%",display:"inline-block"})]));break;case M.None:e.push(new f.GroupProperties("Separator Styles").AddProperties([new V.ColorProperty(this,"background-color",this.StyleManager.CreateStyleClassManager(".productDetail tbody")).SetLabel("Background Color").AddStyles({width:"50%",display:"inline-block"}),new V.ColorProperty(this,"color",this.StyleManager.CreateStyleClassManager(".productDetail tbody")).SetLabel("Color").AddStyles({width:"50%",display:"inline-block"})]))}return e.push(new f.GroupProperties("Total Styles").AddProperties([new V.ColorProperty(this,"background-color",this.StyleManager.CreateStyleClassManager(".footerDetail .total")).SetLabel("Background Color").AddStyles({width:"50%",display:"inline-block"}),new V.ColorProperty(this,"color",this.StyleManager.CreateStyleClassManager(".footerDetail .total")).SetLabel("Color").AddStyles({width:"50%",display:"inline-block"})])),e}},{key:"SetInitialStyles",value:function(){Y(Z(i.prototype),"SetInitialStyles",this).call(this),this.StyleManager.ClearFieldStyles(),this.StyleManager.AddStyleSet(".productDetail, .footerDetail",{"border-collapse":"collapse"}),this.StyleManager.AddStyleSet(".productDetail, .footerDetail",{"border-spacing":"0"}),this.StyleManager.AddStyleSet(".productDetail",{width:"100%"}),this.StyleManager.AddStyleSet(".productDetail .price",{"text-align":"right"}),this.StyleManager.AddStyleSet(".productDetail .name",{"text-align":"left"}),this.StyleManager.AddStyleSet(".footerDetail",{width:"300px","margin-left":"auto"}),this.StyleManager.AddStyleSet(".footerDetail th",{"text-align":"left"}),this.StyleManager.AddStyleSet(".footerDetail td",{"text-align":"right"}),this.StyleManager.AddStyleSet(".productTable td",{padding:"5px"}),this.StyleManager.AddStyleSet(".productTable td, .productTable th",{padding:"9px 5px"}),this.StyleManager.AddStyleSet(".productDetail th",{"background-color":"#336ed0"}),this.StyleManager.AddStyleSet(".productDetail th",{color:"white"}),this.StyleManager.AddStyleSet(".footerDetail .total",{"background-color":"#336ed0"}),this.StyleManager.AddStyleSet(".footerDetail .total",{color:"white"}),this.Options.RowSeparator==M.Line.toString()&&this.StyleManager.AddStyleSet(".productDetail td",{"border-bottom":"1px solid #dfdfdf"}),this.Options.RowSeparator==M.Stripped&&(this.StyleManager.AddStyleSet(".productDetail > tbody tr:nth-of-type(odd)",{"background-color":this.Options.OddBackground,color:this.Options.OddColor}),this.StyleManager.AddStyleSet(".productDetail tr:nth-of-type(even)",{"background-color":this.Options.EvenBackground,color:this.Options.EvenColor})),this.Options.RowSeparator==M.Line&&this.StyleManager.AddStyleSet(".productDetail td",{"border-bottom":"1px solid "+this.Options.BorderColor}),this.Options.RowSeparator==M.LastRow&&this.StyleManager.AddStyleSet(".productDetail tr:last-child td",{"border-bottom":"1px solid "+this.Options.BorderColor})}},{key:"NeedTranslations",value:function(){return!0}},{key:"GetTranslatedText",value:function(){return{text:""}}},{key:"GetFakeData",value:function(){return[{name:"My awesome product 1",price:10},{name:"My awesome product 2",price:20},{name:"My awesome product 3",price:30}]}},{key:"InternalGenerateHtml",value:function(t){var e=new F.a("productDetail productTable");t.append(e.Table),e.CreateTHead(),e.CreateRow();var n,r=K(this.Options.Columns);try{for(r.s();!(n=r.n()).done;){var o=n.value;e.CreateTextColumn(o.Label,o.Type,"th")}}catch(t){r.e(t)}finally{r.f()}e.CreateTBody();var i,a=K(this.GetFakeData());try{for(a.s();!(i=a.n()).done;){var u=i.value;e.CreateRow();var l,s=K(this.Options.Columns);try{for(s.s();!(l=s.n()).done;){var c=l.value,f=u[c.Type];null==f&&(f=0),c.Format==D.number&&(f=B.a.GetInstance().FormatValue(f)),e.CreateTextColumn(f,c.Type)}}catch(t){s.e(t)}finally{s.f()}}}catch(t){a.e(t)}finally{a.f()}if(this.Options.ShowGrandTotal){var d=new F.a("footerDetail productTable");t.append(d.Table),d.CreateTBody(),d.CreateRow(),d.CreateTextColumn(this.Options.GrandTotalLabel,"total","th"),d.CreateTextColumn(B.a.GetInstance().FormatValue(60),"total")}}},{key:"GetProperties",value:function(){var t=this,e=[];return e.push(new z.DropDownProperty(this,"RowSeparator").AddOption("None","none").AddOption("Line","line").AddOption("Stripped","stripped").AddOption("Last","last").OnChange((function(e){l.b.Publish(new N.UpdateFieldSettingsPanel),l.b.Publish(new U.UpdateStyleSettingsPanel),t.SetInitialStyles()}))),e.push(new p.SimpleTextProperty(this,"Label",this.Options.Columns.find((function(t){return t.Type==L.ProductName}))).SetLabel("Product Label")),e.push(new p.SimpleTextProperty(this,"Label",this.Options.Columns.find((function(t){return t.Type==L.Price}))).SetLabel("Price Label")),e.push(new v.CheckBoxProperty(this,"ShowGrandTotal").SetLabel("Show Grand Total").OnChange((function(t){l.b.Publish(new N.UpdateFieldSettingsPanel)}))),this.Options.ShowGrandTotal&&e.push(new p.SimpleTextProperty(this,"GrandTotalLabel").SetLabel("Grand total label")),[new f.GroupProperties("General (Field Id:"+this.Options.Id+")").AddProperties(e)]}},{key:"AfterRefresh",value:function(){}},{key:"GetInitialOptions",value:function(){return new Promise((function(t){t((new G).Merge({Styles:{Left:"2%",Width:"96%"},Columns:[{Label:"Product",Type:L.ProductName,Format:D.string},{Label:"Price",Type:L.Price,Format:D.number}]}))}))}},{key:"GenerateTable",value:function(t){}},{key:"InternalGetLabel",value:function(){return"Image"}},{key:"GetValueEditor",value:function(){return new y.ImageProperty(this,"URL").SetLabel("").SetWidth(100)}}])&&J(e.prototype,n),r&&J(e,r),i}(d.PDFControlBase);function et(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function nt(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function rt(t,e,n){return e&&nt(t.prototype,e),n&&nt(t,n),t}var ot,it=function(){function t(){et(this,t)}return rt(t,null,[{key:"GetControl",value:function(t){switch(t){case ot.InvoiceDetail:return new tt;default:return null}}}]),t}(),at=function(){function t(){et(this,t)}return rt(t,null,[{key:"GetControlOptions",value:function(t){switch(t){case ot.InvoiceDetail:return new G;default:return null}}}]),t}();function ut(t){return(ut="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function lt(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function st(t,e){return(st=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function ct(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,r=dt(t);if(e){var o=dt(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return ft(this,n)}}function ft(t,e){return!e||"object"!==ut(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function dt(t){return(dt=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}!function(t){t.InvoiceDetail="InvoiceDetail"}(ot||(ot={}));var ht=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&st(t,e)}(i,t);var e,n,r,o=ct(i);function i(t){var e;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,i),(e=o.call(this,t)).IsPR=!0,e.state={},e}return e=i,(n=[{key:"GetImage",value:function(){return"WPForm/invoice.png"}},{key:"GetText",value:function(){return"Product detail"}},{key:"GetType",value:function(){return ot.InvoiceDetail}}])&&lt(e.prototype,n),r&&lt(e,r),i}(c.FieldItemBase);ht.defaultProps={};var yt=n(0),pt=n(301),vt=n(300);l.b.Subscribe(s.GetAdvancedField,(function(t){return[yt.createElement(ht,null)]})),l.b.Subscribe(pt.GetControlOptions,(function(t){return at.GetControlOptions(t.Type)})),l.b.Subscribe(vt.GetControl,(function(t){return it.GetControl(t.Type)}))},77:function(t,e){t.exports=InternalShared("InternalShared/Events/UpdateFieldSettingsPanel")},9:function(t,e,n){"use strict";function r(t,e){var n;if("undefined"==typeof Symbol||null==t[Symbol.iterator]){if(Array.isArray(t)||(n=function(t,e){if(!t)return;if("string"==typeof t)return o(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);"Object"===n&&t.constructor&&(n=t.constructor.name);if("Map"===n||"Set"===n)return Array.from(t);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return o(t,e)}(t))||e&&t&&"number"==typeof t.length){n&&(t=n);var r=0,i=function(){};return{s:i,n:function(){return r>=t.length?{done:!0}:{done:!1,value:t[r++]}},e:function(t){throw t},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,u=!0,l=!1;return{s:function(){n=t[Symbol.iterator]()},n:function(){var t=n.next();return u=t.done,t},e:function(t){l=!0,a=t},f:function(){try{u||null==n.return||n.return()}finally{if(l)throw a}}}}function o(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function a(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function u(t,e,n){return e&&a(t.prototype,e),n&&a(t,n),t}n.d(e,"b",(function(){return l})),n.d(e,"a",(function(){return f}));var l=function(){function t(){i(this,t)}return u(t,null,[{key:"GetInstance",value:function(){return null==window.RNLocalEvent&&(window.RNLocalEvent=new s),window.RNLocalEvent}},{key:"Publish",value:function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;return t.GetInstance().Publish(e,n)}},{key:"Subscribe",value:function(e,n){t.GetInstance().Subscribe(e,n)}},{key:"UnsubscribeEvent",value:function(e,n){t.GetInstance().UnsubscribeEvent(e,n)}}]),t}();l.LocalEvent=null;var s=function(){function t(){i(this,t),this.Events={}}return u(t,[{key:"Publish",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,n=t.constructor.GetName();if(null==this.Events[n])return e;var o,i=this.Events[n],a=null,u=r(i);try{for(u.s();!(o=u.n()).done;){var l=o.value,s=void 0;null!=(s=l.CallBack(t))&&(a=s)}}catch(t){u.e(t)}finally{u.f()}return null==a?e:a}},{key:"Subscribe",value:function(t,e){var n=t.GetName();null==this.Events[n]&&(this.Events[n]=[]),this.Events[n].push(new c(t,e))}},{key:"UnsubscribeEvent",value:function(t,e){var n=t.GetName(),r=this.Events[n];if(null!=r){var o=r.find((function(t){return t.CallBack==e}));null!=o&&r.splice(r.indexOf(o),1),0==r.length&&delete this.Events[n]}}}]),t}(),c=function t(e,n){i(this,t),this.Event=void 0,this.CallBack=void 0,this.ReturnType=void 0,this.Event=e,this.CallBack=n},f=function(){function t(){i(this,t),this.ReturnType=void 0}return u(t,null,[{key:"GetName",value:function(){throw new Error("Name was not defined")}}]),t}()}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,